{"version":3,"sources":["../../@types/index.ts","../util/util.ts","ParallaxChildren.tsx","Parallax.tsx","Background.tsx","index.tsx"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src/modules","sourcesContent":["import React from 'react';\n\nexport type DynamicBlurProp = { min: number; max: number };\nexport type BlurProp = number | DynamicBlurProp;\nexport type BgImageProp = string;\nexport type BgImageSrcSetProp = string;\nexport type BgImageSizesProp = string;\n\nexport type ParallaxProps = {\n    bgClassName?: string;\n    bgImageStyle?: { [key: string]: any };\n    blur?: BlurProp;\n    children?: React.ReactNode;\n    className?: string;\n    contentClassName?: string;\n    disabled?: boolean;\n    bgImage?: BgImageProp;\n    bgImageAlt?: string;\n    bgImageSrcSet?: BgImageSrcSetProp;\n    bgImageSizes?: BgImageSizesProp;\n    bgStyle?: { [key: string]: any };\n    log?: boolean;\n    parent?: HTMLElement;\n    renderLayer?: (percentage: number) => any;\n    strength?: number;\n    style?: { [key: string]: any };\n};\n\ntype ParallaxState = {\n    bgImage: string;\n    bgImageSrcSet: string;\n    bgImageSizes: string;\n    bgStyle?: { [key: string]: any };\n    imgStyle: { [key: string]: any };\n    percentage: number;\n};\n\nexport type BackgroundProps = {\n    className?: string;\n};\n\nexport type ParallaxChildrenProps = {\n    className?: string;\n    children?: React.ReactNode;\n    onMount(node: HTMLDivElement): void;\n};\n\nexport class Parallax extends React.Component<ParallaxProps, ParallaxState> {}\n\nexport class Background extends React.Component<BackgroundProps, {}> {}\n","import React from 'react';\nimport { BlurProp, DynamicBlurProp } from '../../@types';\n\nexport function getWindowHeight(useDOM: boolean) {\n    if (!useDOM) {\n        return 0;\n    }\n    const w = window;\n    const d = document;\n    const e = d.documentElement;\n    const g = d.getElementsByTagName('body')[0];\n\n    return w.innerHeight || e.clientHeight || g.clientHeight;\n}\n\nexport function isScrolledIntoView(element: HTMLElement, offset = 0, useDOM: boolean) {\n    if (!useDOM) {\n        return false;\n    }\n    const elementTop = element.getBoundingClientRect().top - offset;\n    const elementBottom = element.getBoundingClientRect().bottom + offset;\n    return elementTop <= getWindowHeight(useDOM) && elementBottom >= 0;\n}\n\nexport function getNodeHeight(useDOM: boolean, node?: HTMLElement | Document) {\n    if (!useDOM) {\n        return 0;\n    }\n\n    if (!node || !('clientHeight' in node)) {\n        return getWindowHeight(useDOM);\n    }\n\n    return node.clientHeight;\n}\n\nexport function canUseDOM() {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}\n\nexport function getPercentage(startpos: number, endpos: number, currentpos: number) {\n    const distance = endpos - startpos;\n    const displacement = currentpos - startpos;\n    return displacement / distance || 0;\n}\n\nexport function getRelativePosition(node: HTMLElement, useDOM: boolean) {\n    if (!useDOM) {\n        return 0;\n    }\n    const element = node;\n    const { top, height } = element.getBoundingClientRect();\n    const parentHeight = getNodeHeight(useDOM);\n    const maxHeight = height > parentHeight ? height : parentHeight;\n    const y = Math.round(top > maxHeight ? maxHeight : top);\n\n    return getPercentage(-height, maxHeight, y);\n}\n\ninterface SplitChildrenProps {\n    children?: React.ReactNode;\n}\nexport interface SplitChildrenResultType {\n    bgChildren: Array<React.ReactNode>;\n    children: Array<React.ReactNode>;\n}\n/**\n * Extracts children with type Background from others and returns an object with both arrays:\n *  {\n *      bgChildren: bgChildren, // typeof child === 'Background'\n *      children: children // rest of this.props.children\n *   }\n */\nexport function getSplitChildren(props: SplitChildrenProps): SplitChildrenResultType {\n    let bgChildren: Array<React.ReactNode> = [];\n    const children = React.Children.toArray(props.children);\n    children.forEach((child, index) => {\n        // @TODO get rid of any\n        const c = <any>child;\n        if (c.type && c.type.isParallaxBackground) {\n            bgChildren = bgChildren.concat(children.splice(index, 1));\n        }\n    });\n    return {\n        bgChildren,\n        children,\n    };\n}\n\nexport const getHasDynamicBlur = (blur: BlurProp) =>\n    typeof blur === 'object' && blur.min !== undefined && blur.max !== undefined;\n\nexport const getBlurValue = (isDynamicBlur: boolean, blur: BlurProp, percentage: number) => {\n    return isDynamicBlur\n        ? (blur as DynamicBlurProp).min + (1 - percentage) * (blur as DynamicBlurProp).max\n        : blur;\n};\n\nexport function setBlur(node: HTMLElement, blur: number) {\n    // eslint-disable-next-line no-param-reassign\n    node.style.webkitFilter = `blur(${blur}px)`;\n    // eslint-disable-next-line no-param-reassign\n    node.style.filter = `blur(${blur}px)`;\n}\n","import React from 'react';\n\nimport { ParallaxChildrenProps } from '../../@types';\n\nconst ParallaxChildren: React.SFC<ParallaxChildrenProps> = ({ children, onMount, className }) => (\n    <div\n        ref={node => onMount(node)}\n        className={className || 'react-parallax-content'}\n        style={{ position: 'relative' }}\n    >\n        {children}\n    </div>\n);\n\nexport default ParallaxChildren;\n","import React from 'react';\n\nimport {\n    ParallaxProps,\n    BgImageProp,\n    BgImageSrcSetProp,\n    BgImageSizesProp,\n    Parallax as ParallaxClass,\n} from '../../@types';\n\nimport {\n    getNodeHeight,\n    canUseDOM,\n    getRelativePosition,\n    getSplitChildren,\n    isScrolledIntoView,\n    getHasDynamicBlur,\n    getBlurValue,\n} from '../util/util';\nimport ParallaxChildren from './ParallaxChildren';\n\nimport { SplitChildrenResultType } from '../util/util';\n\nconst initialStyle = {\n    position: 'absolute',\n    left: '50%',\n    WebkitTransform: 'translate3d(-50%, 0, 0)',\n    transform: 'translate3d(-50%, 0, 0)',\n    WebkitTransformStyle: 'preserve-3d',\n    WebkitBackfaceVisibility: 'hidden',\n    MozBackfaceVisibility: 'hidden',\n    MsBackfaceVisibility: 'hidden',\n};\n\nclass Parallax extends ParallaxClass {\n    bg: HTMLDivElement;\n    canUseDOM: boolean;\n    contentHeight: number;\n    contentWidth: number;\n    node: HTMLElement;\n    content: HTMLElement;\n    img: HTMLImageElement;\n    splitChildren: SplitChildrenResultType;\n    bgImageLoaded: boolean;\n    bgImageRef: HTMLImageElement;\n    parent: HTMLElement | Document;\n    parentHeight: number;\n    timestamp: number;\n    isDynamicBlur: boolean;\n\n    static defaultProps = {\n        bgClassName: 'react-parallax-bgimage',\n        bgImageAlt: '',\n        className: '',\n        contentClassName: '',\n        disabled: false,\n        log: false,\n        strength: 100,\n    };\n\n    constructor(props: ParallaxProps) {\n        super(props);\n\n        this.state = {\n            bgImage: props.bgImage,\n            bgImageSrcSet: props.bgImageSrcSet,\n            bgImageSizes: props.bgImageSizes,\n            imgStyle: initialStyle,\n            bgStyle: {\n                ...initialStyle,\n                ...props.bgStyle,\n            },\n            percentage: 0,\n        };\n\n        this.canUseDOM = canUseDOM();\n\n        this.node = null;\n        this.content = null;\n        this.splitChildren = getSplitChildren(props);\n\n        this.bgImageLoaded = false;\n        this.bgImageRef = undefined;\n\n        this.parent = props.parent;\n        this.parentHeight = getNodeHeight(this.canUseDOM, this.parent);\n        this.timestamp = Date.now();\n        this.isDynamicBlur = getHasDynamicBlur(props.blur);\n    }\n\n    /**\n     * bind some eventlisteners for page load, scroll and resize\n     * save component ref after rendering, update all values and set static style values\n     */\n    componentDidMount() {\n        const { parent } = this.props;\n        const { bgImage, bgImageSrcSet, bgImageSizes } = this.state;\n\n        this.parent = parent || document;\n        this.addListeners();\n        // ref to component itself\n\n        if (bgImage) {\n            this.loadImage(bgImage, bgImageSrcSet, bgImageSizes);\n        } else {\n            this.updatePosition();\n        }\n    }\n\n    componentDidUpdate() {\n        const { parent, bgImage, bgImageSrcSet, bgImageSizes } = this.props;\n        const { bgImage: stateBgImage } = this.state;\n        this.splitChildren = getSplitChildren(this.props);\n        if (parent && this.parent !== parent) {\n            this.parent = parent;\n            this.removeListeners();\n            this.addListeners();\n        }\n        this.parentHeight = getNodeHeight(this.canUseDOM, this.parent);\n\n        if (stateBgImage !== bgImage) {\n            this.loadImage(bgImage, bgImageSrcSet, bgImageSizes);\n        }\n    }\n\n    /**\n     * remove all eventlisteners before component is destroyed\n     */\n    componentWillUnmount() {\n        this.removeListeners();\n        this.releaseImage();\n    }\n\n    /**\n     * update window height and positions on window resize\n     */\n    onWindowResize = () => {\n        this.parentHeight = getNodeHeight(this.canUseDOM, this.parent);\n        this.updatePosition();\n    };\n\n    onWindowLoad = () => {\n        this.updatePosition();\n    };\n\n    onScroll = () => {\n        if (!this.canUseDOM) {\n            return;\n        }\n        const stamp = Date.now();\n        if (stamp - this.timestamp >= 10 && isScrolledIntoView(this.node, 100, this.canUseDOM)) {\n            window.requestAnimationFrame(this.updatePosition);\n            this.timestamp = stamp;\n        }\n    };\n\n    onContentMount = (content: HTMLElement) => {\n        this.content = content;\n    };\n\n    setBackgroundPosition(percentage: number) {\n        const { disabled, strength } = this.props;\n        // don't do unneccessary style processing if parallax is disabled\n        if (disabled === true) {\n            return;\n        }\n\n        const { bgStyle } = this.state;\n        const inverse = strength < 0;\n        const pos = (inverse ? strength : 0) - strength * percentage;\n        const transform = `translate3d(-50%, ${pos}px, 0)`;\n\n        this.setState({\n            bgStyle: {\n                ...bgStyle,\n                WebkitTransform: transform,\n                transform,\n            },\n            percentage,\n        });\n    }\n\n    /**\n     * sets position for the background image\n     */\n    setImagePosition(percentage: number, autoHeight = false) {\n        const { disabled, strength, blur } = this.props;\n        const height = autoHeight ? 'auto' : `${this.getImageHeight()}px`;\n        const width = !autoHeight ? 'auto' : `${this.contentWidth}px`;\n\n        // don't do unneccessary style processing if parallax is disabled\n        if (disabled === true) {\n            return;\n        }\n\n        const { imgStyle } = this.state;\n        const inverse = strength < 0;\n        const pos = (inverse ? strength : 0) - strength * percentage;\n\n        const transform = `translate3d(-50%, ${pos}px, 0)`;\n        let filter = 'none';\n        if (blur) {\n            filter = `blur(${getBlurValue(this.isDynamicBlur, blur, percentage)}px)`;\n        }\n\n        this.setState({\n            imgStyle: {\n                ...imgStyle,\n                height,\n                width,\n                WebkitTransform: transform,\n                transform,\n                WebkitFilter: filter,\n                filter,\n            },\n            percentage,\n        });\n    }\n\n    /**\n     * The image height depends on parallax direction. If strength value is negative we have to give it more height\n     * so there is no white space at start/end of container visiblility.\n     */\n    getImageHeight() {\n        const { strength } = this.props;\n        const inverse = strength < 0;\n        const factor = inverse ? 2.5 : 1;\n        const strengthWithFactor = factor * Math.abs(strength);\n        return Math.floor(this.contentHeight + strengthWithFactor);\n    }\n\n    /**\n     * updates scroll position of this component and also its width and height.\n     * defines, if the background image should have autoHeight or autoWidth to\n     * fit the component space optimally\n     */\n    updatePosition = () => {\n        if (!this.content) {\n            return;\n        }\n        let autoHeight = false;\n        this.contentHeight = this.content.getBoundingClientRect().height;\n        this.contentWidth = this.node.getBoundingClientRect().width;\n\n        // set autoHeight or autoWidth\n        if (\n            this.img &&\n            this.img.naturalWidth / this.img.naturalHeight <\n                this.contentWidth / this.getImageHeight()\n        ) {\n            autoHeight = true;\n        }\n\n        // get relative scroll-y position of parallax component in percentage\n        const percentage = getRelativePosition(this.node, this.canUseDOM);\n\n        // update bg image position if set\n        if (this.img) {\n            this.setImagePosition(percentage, autoHeight);\n        }\n        // update position of Background children if exist\n        if (this.bg && this.splitChildren.bgChildren.length > 0) {\n            this.setBackgroundPosition(percentage);\n        }\n    };\n\n    /**\n     * Makes sure that the image was loaded before render\n     */\n    loadImage(\n        bgImage: BgImageProp,\n        bgImageSrcSet: BgImageSrcSetProp,\n        bgImageSizes: BgImageSizesProp,\n    ) {\n        this.releaseImage();\n        this.bgImageRef = new Image();\n        this.bgImageRef.onload = () => {\n            this.setState(\n                {\n                    bgImage,\n                    bgImageSrcSet,\n                    bgImageSizes,\n                },\n                () => this.updatePosition(),\n            );\n        };\n        this.bgImageRef.onerror = this.bgImageRef.onload;\n        this.bgImageRef.src = bgImage;\n        this.bgImageRef.srcset = bgImageSrcSet || '';\n        this.bgImageRef.sizes = bgImageSizes || '';\n    }\n\n    /**\n     * Unbind eventlistener of bg image and delete it\n     */\n    releaseImage() {\n        if (this.bgImageRef) {\n            this.bgImageRef.onload = null;\n            this.bgImageRef.onerror = null;\n            delete this.bgImageRef;\n        }\n    }\n\n    addListeners() {\n        if (this.canUseDOM && this.parent) {\n            this.parent.addEventListener('scroll', this.onScroll, false);\n            window.addEventListener('resize', this.onWindowResize, false);\n            window.addEventListener('load', this.onWindowLoad, false);\n        }\n    }\n\n    removeListeners() {\n        if (this.canUseDOM && this.parent) {\n            this.parent.removeEventListener('scroll', this.onScroll, false);\n            window.removeEventListener('resize', this.onWindowResize, false);\n            window.removeEventListener('load', this.onWindowLoad, false);\n        }\n    }\n\n    log(...args: any) {\n        const { log } = this.props;\n        if (log) {\n            console.log(args);\n        }\n    }\n\n    render() {\n        const {\n            className,\n            style,\n            bgClassName,\n            contentClassName,\n            bgImageAlt,\n            renderLayer,\n            bgImageStyle,\n        } = this.props;\n        const { bgImage, bgImageSrcSet, bgImageSizes, percentage, imgStyle, bgStyle } = this.state;\n        return (\n            <div\n                className={`react-parallax ${className}`}\n                style={{ position: 'relative', overflow: 'hidden', ...style }}\n                ref={node => {\n                    this.node = node;\n                }}\n            >\n                {bgImage ? (\n                    <img\n                        className={bgClassName}\n                        src={bgImage}\n                        srcSet={bgImageSrcSet}\n                        sizes={bgImageSizes}\n                        ref={bg => {\n                            this.img = bg;\n                        }}\n                        alt={bgImageAlt}\n                        style={{ ...imgStyle, ...bgImageStyle }}\n                    />\n                ) : null}\n                {renderLayer ? renderLayer(Math.min(-(percentage - 1), 1)) : null}\n                {this.splitChildren.bgChildren.length > 0 ? (\n                    <div\n                        className=\"react-parallax-background-children\"\n                        ref={bg => {\n                            this.bg = bg;\n                        }}\n                        style={bgStyle}\n                    >\n                        {this.splitChildren.bgChildren}\n                    </div>\n                ) : null}\n                <ParallaxChildren onMount={this.onContentMount} className={contentClassName}>\n                    {this.splitChildren.children}\n                </ParallaxChildren>\n            </div>\n        );\n    }\n}\n\nexport default Parallax;\n","import React from 'react';\n\nimport { Background as BackgroundClass } from '../../@types';\n\nclass Background extends BackgroundClass {\n    static defaultProps = {\n        className: '',\n    };\n    static isParallaxBackground() {\n        return true;\n    }\n\n    render() {\n        const { className, children } = this.props;\n        return <div className={`react-parallax-background ${className}`}>{children}</div>;\n    }\n}\n\nexport default Background;\n","import Parallax from './Parallax';\n\nimport Background from './Background';\n\nexport { Parallax, Background };\n\n// https://www.typescriptlang.org/docs/handbook/react-&-webpack.html\n"]}